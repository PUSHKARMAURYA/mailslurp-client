/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 67c9a1eda264be4cfe0bb2c76151f0aadf0862bc
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Email,
    EmailFromJSON,
    EmailToJSON,
    EmailPreview,
    EmailPreviewFromJSON,
    EmailPreviewToJSON,
    MatchOptions,
    MatchOptionsFromJSON,
    MatchOptionsToJSON,
    WaitForConditions,
    WaitForConditionsFromJSON,
    WaitForConditionsToJSON,
} from '../models';

export interface WaitForRequest {
    waitForConditions?: WaitForConditions;
}

export interface WaitForEmailCountRequest {
    count?: number;
    inboxId?: string;
    timeout?: number;
    unreadOnly?: boolean;
}

export interface WaitForLatestEmailRequest {
    inboxId?: string;
    timeout?: number;
    unreadOnly?: boolean;
}

export interface WaitForMatchingEmailRequest {
    matchOptions: MatchOptions;
    count?: number;
    inboxId?: string;
    timeout?: number;
    unreadOnly?: boolean;
}

export interface WaitForNthEmailRequest {
    inboxId?: string;
    index?: number;
    timeout?: number;
    unreadOnly?: boolean;
}

/**
 * no description
 */
export class WaitForControllerApi extends runtime.BaseAPI {

    /**
     * Generic waitFor method that will wait until an inbox meets given conditions or return immediately if already met
     * Wait for conditions to be met
     */
    async waitForRaw(requestParameters: WaitForRequest): Promise<runtime.ApiResponse<Array<EmailPreview>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/waitFor`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WaitForConditionsToJSON(requestParameters.waitForConditions),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmailPreviewFromJSON));
    }

    /**
     * Generic waitFor method that will wait until an inbox meets given conditions or return immediately if already met
     * Wait for conditions to be met
     */
    async waitFor(requestParameters: WaitForRequest): Promise<Array<EmailPreview>> {
        const response = await this.waitForRaw(requestParameters);
        return await response.value();
    }

    /**
     * If inbox contains count or more emails at time of request then return count worth of emails. If not wait until the count is reached and return those or return an error if timeout is exceeded.
     * Wait for and return count number of emails 
     */
    async waitForEmailCountRaw(requestParameters: WaitForEmailCountRequest): Promise<runtime.ApiResponse<Array<EmailPreview>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.inboxId !== undefined) {
            queryParameters['inboxId'] = requestParameters.inboxId;
        }

        if (requestParameters.timeout !== undefined) {
            queryParameters['timeout'] = requestParameters.timeout;
        }

        if (requestParameters.unreadOnly !== undefined) {
            queryParameters['unreadOnly'] = requestParameters.unreadOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/waitForEmailCount`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmailPreviewFromJSON));
    }

    /**
     * If inbox contains count or more emails at time of request then return count worth of emails. If not wait until the count is reached and return those or return an error if timeout is exceeded.
     * Wait for and return count number of emails 
     */
    async waitForEmailCount(requestParameters: WaitForEmailCountRequest): Promise<Array<EmailPreview>> {
        const response = await this.waitForEmailCountRaw(requestParameters);
        return await response.value();
    }

    /**
     * Will return either the last received email or wait for an email to arrive and return that. If you need to wait for an email for a non-empty inbox see the other receive methods such as waitForNthEmail or waitForEmailCount.
     * Fetch inbox\'s latest email or if empty wait for an email to arrive
     */
    async waitForLatestEmailRaw(requestParameters: WaitForLatestEmailRequest): Promise<runtime.ApiResponse<Email>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.inboxId !== undefined) {
            queryParameters['inboxId'] = requestParameters.inboxId;
        }

        if (requestParameters.timeout !== undefined) {
            queryParameters['timeout'] = requestParameters.timeout;
        }

        if (requestParameters.unreadOnly !== undefined) {
            queryParameters['unreadOnly'] = requestParameters.unreadOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/waitForLatestEmail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailFromJSON(jsonValue));
    }

    /**
     * Will return either the last received email or wait for an email to arrive and return that. If you need to wait for an email for a non-empty inbox see the other receive methods such as waitForNthEmail or waitForEmailCount.
     * Fetch inbox\'s latest email or if empty wait for an email to arrive
     */
    async waitForLatestEmail(requestParameters: WaitForLatestEmailRequest): Promise<Email> {
        const response = await this.waitForLatestEmailRaw(requestParameters);
        return await response.value();
    }

    /**
     * Perform a search of emails in an inbox with the given patterns. If results match expected count then return or else retry the search until results are found or timeout is reached. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM. See the `MatchOptions` object for options.
     * Wait or return list of emails that match simple matching patterns
     */
    async waitForMatchingEmailRaw(requestParameters: WaitForMatchingEmailRequest): Promise<runtime.ApiResponse<Array<EmailPreview>>> {
        if (requestParameters.matchOptions === null || requestParameters.matchOptions === undefined) {
            throw new runtime.RequiredError('matchOptions','Required parameter requestParameters.matchOptions was null or undefined when calling waitForMatchingEmail.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.inboxId !== undefined) {
            queryParameters['inboxId'] = requestParameters.inboxId;
        }

        if (requestParameters.timeout !== undefined) {
            queryParameters['timeout'] = requestParameters.timeout;
        }

        if (requestParameters.unreadOnly !== undefined) {
            queryParameters['unreadOnly'] = requestParameters.unreadOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/waitForMatchingEmails`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MatchOptionsToJSON(requestParameters.matchOptions),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmailPreviewFromJSON));
    }

    /**
     * Perform a search of emails in an inbox with the given patterns. If results match expected count then return or else retry the search until results are found or timeout is reached. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM. See the `MatchOptions` object for options.
     * Wait or return list of emails that match simple matching patterns
     */
    async waitForMatchingEmail(requestParameters: WaitForMatchingEmailRequest): Promise<Array<EmailPreview>> {
        const response = await this.waitForMatchingEmailRaw(requestParameters);
        return await response.value();
    }

    /**
     * If nth email is already present in inbox then return it. If not hold the connection open until timeout expires or the nth email is received and returned.
     * Wait for or fetch the email with a given index in the inbox specified
     */
    async waitForNthEmailRaw(requestParameters: WaitForNthEmailRequest): Promise<runtime.ApiResponse<Email>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.inboxId !== undefined) {
            queryParameters['inboxId'] = requestParameters.inboxId;
        }

        if (requestParameters.index !== undefined) {
            queryParameters['index'] = requestParameters.index;
        }

        if (requestParameters.timeout !== undefined) {
            queryParameters['timeout'] = requestParameters.timeout;
        }

        if (requestParameters.unreadOnly !== undefined) {
            queryParameters['unreadOnly'] = requestParameters.unreadOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/waitForNthEmail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailFromJSON(jsonValue));
    }

    /**
     * If nth email is already present in inbox then return it. If not hold the connection open until timeout expires or the nth email is received and returned.
     * Wait for or fetch the email with a given index in the inbox specified
     */
    async waitForNthEmail(requestParameters: WaitForNthEmailRequest): Promise<Email> {
        const response = await this.waitForNthEmailRaw(requestParameters);
        return await response.value();
    }

}
