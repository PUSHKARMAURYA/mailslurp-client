/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 67c9a1eda264be4cfe0bb2c76151f0aadf0862bc
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MatchOption,
    MatchOptionFromJSON,
    MatchOptionFromJSONTyped,
    MatchOptionToJSON,
} from './';

/**
 *
 * @export
 * @interface WaitForConditions
 */
export interface WaitForConditions {
    /**
     * Number of results that should match conditions
     * @type {number}
     * @memberof WaitForConditions
     */
    count?: number;
    /**
     * Should exactly count number of results be returned or at least that many.
     * @type {string}
     * @memberof WaitForConditions
     */
    countType?: WaitForConditionsCountTypeEnum;
    /**
     * Inbox to search within
     * @type {string}
     * @memberof WaitForConditions
     */
    inboxId?: string;
    /**
     * Conditions that should be matched
     * @type {Array<MatchOption>}
     * @memberof WaitForConditions
     */
    matches?: Array<MatchOption>;
    /**
     * Direction to sort matching emails by created time
     * @type {string}
     * @memberof WaitForConditions
     */
    sortDirection?: WaitForConditionsSortDirectionEnum;
    /**
     * Max time in milliseconds to wait until conditions are met
     * @type {number}
     * @memberof WaitForConditions
     */
    timeout?: number;
    /**
     * Apply only to unread emails
     * @type {boolean}
     * @memberof WaitForConditions
     */
    unreadOnly?: boolean;
}

export function WaitForConditionsFromJSON(json: any): WaitForConditions {
    return WaitForConditionsFromJSONTyped(json, false);
}

export function WaitForConditionsFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): WaitForConditions {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        count: !exists(json, 'count') ? undefined : json['count'],
        countType: !exists(json, 'countType') ? undefined : json['countType'],
        inboxId: !exists(json, 'inboxId') ? undefined : json['inboxId'],
        matches: !exists(json, 'matches')
            ? undefined
            : (json['matches'] as Array<any>).map(MatchOptionFromJSON),
        sortDirection: !exists(json, 'sortDirection')
            ? undefined
            : json['sortDirection'],
        timeout: !exists(json, 'timeout') ? undefined : json['timeout'],
        unreadOnly: !exists(json, 'unreadOnly')
            ? undefined
            : json['unreadOnly'],
    };
}

export function WaitForConditionsToJSON(value?: WaitForConditions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        count: value.count,
        countType: value.countType,
        inboxId: value.inboxId,
        matches:
            value.matches === undefined
                ? undefined
                : (value.matches as Array<any>).map(MatchOptionToJSON),
        sortDirection: value.sortDirection,
        timeout: value.timeout,
        unreadOnly: value.unreadOnly,
    };
}

/**
 * @export
 * @enum {string}
 */
export enum WaitForConditionsCountTypeEnum {
    EXACTLY = 'EXACTLY',
    ATLEAST = 'ATLEAST',
}
/**
 * @export
 * @enum {string}
 */
export enum WaitForConditionsSortDirectionEnum {
    ASC = 'ASC',
    DESC = 'DESC',
}
